name: Déploiement de Widgetbook sur GitHub Pages

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'widgetbook/**'  # Ne déclencher que si des changements dans le répertoire widgetbook

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'  # Important: récupérer tous les sous-modules
          token: ${{ secrets.PAT_CODE }}  # Utiliser le token PAT pour avoir accès aux sous-modules privés
      
      - name: Vérification de la structure des sous-modules
        run: |
          echo "Liste des sous-modules:"
          git submodule status
          
          if [ ! -d "widgetbook" ]; then
            echo "Le répertoire widgetbook n'existe pas ou n'est pas correctement initialisé!"
            exit 1
          fi
          
          echo "Contenu du répertoire widgetbook:"
          ls -la widgetbook/

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true  # Mise en cache des dépendances pour accélérer les builds

      - name: Installation des dépendances
        run: cd widgetbook && flutter pub get
      
      - name: Génération des fichiers de configuration Widgetbook
        run: |
          cd widgetbook
          dart run build_runner build -d

      - name: Génération des fichiers de localisation
        run: |
          cd widgetbook
          flutter pub run intl_utils:generate
        
      - name: Construction de l'application pour le web
        run: |
          cd widgetbook
          flutter build web --release --base-href "/saasfork-ui-widgetbook/"
            
      - name: Vérifier que le build a réussi
        run: |
          if [ ! -d "widgetbook/build/web" ]; then
            echo "Le build a échoué!"
            exit 1
          fi

      - name: Déploiement sur le dépôt cible
        env:
          TOKEN: ${{ secrets.PAT_CODE }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # Vérifier le token d'accès
          if [ -z "$TOKEN" ]; then
            echo "Le token d'accès PAT_CODE n'est pas défini."
            exit 1
          fi
          
          echo "Configuration du dépôt cible..."
          REPO_URL="https://${TOKEN}@github.com/saasfork/saasfork-ui-widgetbook.git"
          
          # Utiliser un répertoire temporaire pour le clone
          mkdir -p tmp_deploy
          cd tmp_deploy
          
          # Essayer de vérifier si le dépôt cible existe et est accessible
          echo "Vérification de l'accès au dépôt cible..."
          git ls-remote "$REPO_URL" HEAD &> /dev/null
          REPO_ACCESS=$?
          
          # Déterminer si le dépôt est accessible mais vide ou inaccessible
          if [ $REPO_ACCESS -ne 0 ]; then
            # Vérifier si le dépôt existe mais est vide
            git ls-remote "$REPO_URL" refs/heads/* &> /dev/null
            if [ $? -ne 0 ]; then
              echo "Erreur: Impossible d'accéder au dépôt cible. Vérifiez les permissions du token."
              exit 1
            else
              echo "Le dépôt existe mais est complètement vide. Configuration d'un nouveau dépôt..."
              # Initialiser un nouveau dépôt
              git init
              git remote add origin "$REPO_URL"
            fi
          else
            # Clone du dépôt
            echo "Clonage du dépôt cible..."
            git clone "$REPO_URL" .
            
            git fetch origin main || echo "Pas de branche main, elle sera créée..."
            git checkout main || git checkout -b main
          fi
          
          # Préserver le répertoire .git mais supprimer le reste
          find . -mindepth 1 -maxdepth 1 ! -name .git -exec rm -rf {} \; 2>/dev/null || true
          
          # Copier les fichiers du build
          echo "Copie des fichiers du build..."
          cp -r ../widgetbook/build/web/* .
          
          # Créer un fichier .nojekyll pour éviter le traitement Jekyll
          touch .nojekyll
          
          # Ajouter, commit et push
          echo "Préparation du commit..."
          git add -A
          
          # Commit même si c'est le premier
          git commit -m "Déploiement de Widgetbook - $(date +"%Y-%m-%d %H:%M:%S")"
          
          echo "Push vers le dépôt cible..."
          # Forcer le push si c'est un nouveau dépôt
          git push -u origin main
