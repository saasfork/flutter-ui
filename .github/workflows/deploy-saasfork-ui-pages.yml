name: Déploiement de Widgetbook sur GitHub Pages

on:
  push:
    branches:
      - main
      - develop
    # paths:
    #   - 'widgetbook/**'  # Ne déclencher que si des changements dans le répertoire widgetbook

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Configuration de Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'
          cache: true  # Mise en cache des dépendances pour accélérer les builds

      - name: Installation des dépendances
        run: cd widgetbook && flutter pub get
      
      - name: Génération des fichiers de configuration Widgetbook
        run: |
          cd widgetbook
          dart run build_runner build -d

      - name: Génération des fichiers de localisation
        run: |
          cd widgetbook
          flutter pub run intl_utils:generate
        
      - name: Vérifier la structure du projet
        run: |
          if [ ! -d "widgetbook" ]; then
            echo "Le répertoire widgetbook n'existe pas!"
            exit 1
          fi

      - name: Construction de l'application pour le web
        run: |
          cd widgetbook
          flutter build web
            
      - name: Vérifier que le build a réussi
        run: |
          if [ ! -d "widgetbook/build/web" ]; then
            echo "Le build a échoué!"
            exit 1
          fi

      - name: Déploiement sur le dépôt cible
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_CODE }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # Vérifier le token d'accès
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "Le token d'accès PAT_CODE n'est pas défini."
            exit 1
          fi
          
          echo "Configuration du dépôt cible..."
          REPO_URL="https://${GITHUB_TOKEN}@github.com/saasfork/saasfork-ui-widgetbook.git"
          
          # Utiliser un répertoire temporaire pour le clone
          mkdir -p tmp_deploy
          cd tmp_deploy
          
          # Essayer de vérifier si le dépôt cible existe et est accessible
          echo "Vérification de l'accès au dépôt cible..."
          git ls-remote "$REPO_URL" HEAD &> /dev/null
          if [ $? -ne 0 ]; then
            echo "Erreur: Impossible d'accéder au dépôt cible. Vérifiez les permissions du token."
            exit 1
          fi
          
          # Vérifier si le dépôt est vide
          REPO_EMPTY=0
          git ls-remote --exit-code "$REPO_URL" HEAD &> /dev/null || REPO_EMPTY=1
          
          # Clone du dépôt
          echo "Clonage du dépôt cible..."
          git clone "$REPO_URL" .
          
          if [ $REPO_EMPTY -eq 1 ]; then
            echo "Le dépôt semble être vide. Initialisation d'une nouvelle branche main..."
            git checkout --orphan main
          else
            echo "Basculement vers la branche main..."
            git checkout main || git checkout -b main
          fi
          
          # Préserver le répertoire .git mais supprimer le reste
          find . -maxdepth 1 ! -name .git -exec rm -rf {} \; 2>/dev/null || true
          
          # Copier les fichiers du build
          echo "Copie des fichiers du build..."
          cp -r ../widgetbook/build/web/* .
          
          # Créer un fichier .nojekyll pour éviter le traitement Jekyll
          touch .nojekyll
          
          # Ajouter, commit et push
          echo "Préparation du commit..."
          git add -A
          
          if git diff --staged --quiet; then
            echo "Aucun changement à déployer."
          else
            echo "Commit des changements..."
            git commit -m "Déploiement de Widgetbook - $(date +"%Y-%m-%d %H:%M:%S")"
            
            echo "Push vers le dépôt cible..."
            git push -u origin main
